import smtplib
import os
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime

class EmailService:
    def __init__(self):
        self.smtp_server = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
        self.smtp_port = int(os.environ.get("SMTP_PORT", "587"))
        self.email_user = os.environ.get("EMAIL_USER", "")
        self.email_password = os.environ.get("EMAIL_PASSWORD", "")
        self.from_email = os.environ.get("FROM_EMAIL", self.email_user)
        
    def send_alert_email(self, user, incident):
        """Send an email alert to a user about an incident"""
        try:
            if not self.email_user or not self.email_password:
                logging.warning("Email credentials not configured, skipping email notification")
                return False
            
            # Create message
            msg = MIMEMultipart()
            msg['From'] = self.from_email
            msg['To'] = user.email
            msg['Subject'] = f"üö® CityGuard Alert: {incident.title}"
            
            # Create email body
            body = self.create_alert_email_body(user, incident)
            msg.attach(MIMEText(body, 'html'))
            
            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.email_user, self.email_password)
                server.send_message(msg)
            
            logging.info(f"Email alert sent to {user.email} for incident {incident.id}")
            return True
            
        except Exception as e:
            logging.error(f"Failed to send email alert to {user.email}: {e}")
            return False
    
    def create_alert_email_body(self, user, incident):
        """Create HTML email body for incident alert"""
        severity_colors = {
            'low': '#28a745',      # Green
            'medium': '#ffc107',   # Yellow
            'high': '#fd7e14',     # Orange
            'critical': '#dc3545'  # Red
        }
        
        severity_color = severity_colors.get(incident.severity, '#6c757d')
        
        html_body = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                .header {{ background: #007bff; color: white; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; background: #f8f9fa; }}
                .incident-card {{ background: white; border-left: 5px solid {severity_color}; padding: 15px; margin: 15px 0; }}
                .severity {{ display: inline-block; padding: 5px 10px; color: white; background: {severity_color}; border-radius: 3px; font-weight: bold; }}
                .footer {{ text-align: center; padding: 15px; color: #6c757d; font-size: 12px; }}
                .btn {{ display: inline-block; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üõ°Ô∏è CityGuard AI Alert</h1>
                    <p>Local Incident Notification</p>
                </div>
                
                <div class="content">
                    <p>Hello {user.username},</p>
                    
                    <p>We've detected a new incident in your area that requires your attention:</p>
                    
                    <div class="incident-card">
                        <h3>{incident.title}</h3>
                        <p><span class="severity">{incident.severity.upper()}</span></p>
                        <p><strong>Location:</strong> {incident.location}</p>
                        <p><strong>Category:</strong> {incident.category.title()}</p>
                        <p><strong>Time:</strong> {incident.created_at.strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
                        
                        <h4>Summary:</h4>
                        <p>{incident.ai_summary or incident.description}</p>
                        
                        {f'<p><a href="{incident.url}" class="btn">View Source</a></p>' if incident.url else ''}
                    </div>
                    
                    <p><strong>Safety Recommendation:</strong> Stay informed and follow local authority guidance.</p>
                </div>
                
                <div class="footer">
                    <p>This alert was generated by CityGuard AI based on verified local sources.</p>
                    <p>You're receiving this because you subscribed to alerts for {user.location}.</p>
                    <p>Stay safe!</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        return html_body
    
    def send_test_email(self, to_email):
        """Send a test email to verify email configuration"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self.from_email
            msg['To'] = to_email
            msg['Subject'] = "CityGuard AI - Email Configuration Test"
            
            body = """
            <html>
            <body>
                <h2>CityGuard AI Email Test</h2>
                <p>This is a test email to verify your email configuration is working correctly.</p>
                <p>If you received this email, your CityGuard AI email notifications are properly configured!</p>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.email_user, self.email_password)
                server.send_message(msg)
            
            return True
            
        except Exception as e:
            logging.error(f"Failed to send test email: {e}")
            return False
